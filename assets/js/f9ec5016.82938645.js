"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[5534],{8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var s=n(6540);const o={},r=s.createContext(o);function a(e){const t=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(r.Provider,{value:t},e.children)}},9028:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"TWF/AC","title":"Apply Consent","description":"The applyConsent Logic validates the store ID and checks the applicant\u2019s consent status, ensuring consent hasn\u2019t been previously submitted. It converts the submitted base64 signature image into a buffer, creates a new consent record linked to the application, and saves the signature image.","source":"@site/docs/TWF/AC.md","sourceDirName":"TWF","slug":"/TWF/AC","permalink":"/docs-setup/docs/TWF/AC","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/TWF/AC.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Technical Workflow","permalink":"/docs-setup/docs/category/technical-workflow"},"next":{"title":"Apply Consent","permalink":"/docs-setup/docs/TWF/AI"}}');var o=n(4848),r=n(8453);const a={sidebar_position:2},i="Apply Consent",c={},d=[];function l(e){const t={h1:"h1",header:"header",mermaid:"mermaid",p:"p",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"apply-consent",children:"Apply Consent"})}),"\n",(0,o.jsx)(t.p,{children:"The applyConsent Logic validates the store ID and checks the applicant\u2019s consent status, ensuring consent hasn\u2019t been previously submitted. It converts the submitted base64 signature image into a buffer, creates a new consent record linked to the application, and saves the signature image."}),"\n",(0,o.jsx)(t.mermaid,{value:'flowchart TD\n  classDef startend fill:#76c7c0,stroke:#333,stroke-width:2px,color:#fff,font-weight:bold;\n  classDef process fill:#6fa8dc,stroke:#333,stroke-width:1.5px,color:#222,font-weight:bold;\n  classDef decision fill:#ffb347,stroke:#333,stroke-width:2px,color:#333,font-weight:bold;\n  classDef error fill:#f44336,stroke:#900,stroke-width:2px,color:#fff,font-weight:bold;\n  classDef success fill:#4caf50,stroke:#256a2e,stroke-width:2px,color:#fff,font-weight:bold;\n\n  Start(["Start"]):::startend --validate store--\x3e FetchApp["Fetch Application with<br/>Consent info"]:::process\n  FetchApp --\x3e ValidApp{"Does the application exists<br/>& consent not provided?"}:::decision\n  ValidApp -- No --\x3e Error["Error"]:::error\n  ValidApp -- Yes --\x3e CreateConsent["Create User<br/>Consent Record"]:::process\n  CreateConsent --\x3e SaveImage["Save Consent Image"]:::process\n  SaveImage --\x3e  End(["End"]):::startend\n\n  Error --\x3e End\n\n\n'})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);